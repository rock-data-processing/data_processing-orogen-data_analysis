name "data_analysis"

import_types_from "base"
import_types_from "data_analysisTypes.hpp"
using_library "data_analysis"
using_task_library "type_to_vector"

task_context "ToRaw" do

    subclasses "type_to_vector::BaseTask"

    doc "Convert typed into data into raw data stream and write it as base/VectorXd"

    dynamic_output_port(/^raw_\d+$/, "base/VectorXd").
        doc "The raw output data for each input"

    port_driven
end

task_context "NormTask" do

    doc "Compute the lp norm of the input data stream"

    property("p", "double").
        doc "The exponent of the norm. Allowed values are
              p = 1 -> sum norm
              p = 2 -> euclidean norm
              p = inf -> inf-norm/max.-norm"

    input_port("input_data", "base/VectorXd").
        doc "The raw input data stream"

    output_port("norm", "double").
        doc "The norm of the input data stream."

    output_port("norm_vector", "base/VectorXd").
        doc "The norm of the input data stream as a single entry vector."

    port_driven
end

task_context "RMSTask" do

    doc "Compute the RMS of the input data stream:

         y = sqrt( (1/n) sum_1^n (x_n*x_n) )"

    property("window_size", "double").
        doc "The size of the filter window. Can be .Inf, in which case all input data ever arrived will be considered"

    input_port("input_data", "base/VectorXd").
        doc "The raw input data stream"

    output_port("rms", "double")
        doc "The rms value of the input data stream."

    output_port("rms_vector", "base/VectorXd")
        doc "The rms value of the input data stream as a single entry vector."

    port_driven
end

task_context "MeanTask" do

    doc "Compute mean and std. dev. of the input data stream"

    property("window_size", "double").
        doc "The size of the filter window. Can be .Inf, in which case all input data ever arrived will be considered"

    input_port("input_data", "base/VectorXd").
        doc "The raw input data stream"

    output_port("mean", "base/VectorXd").
        doc "The mean of the input data stream."

    output_port("std_dev", "base/VectorXd").
        doc "The standard deviation of the input data stream."

    port_driven
end

task_context "MinMaxTask" do

    doc "Output the min or max value of the each element of the input data stream"

    property("window_size", "double").
        doc "The size of the filter window. Can be .Inf, in which case all input data ever arrived will be considered"

    input_port("input_data", "base/VectorXd").
        doc "The raw input data stream"

    output_port("min", "base/VectorXd")
        doc "The min value of each element of the input data stream."

    output_port("max", "base/VectorXd")
        doc "The max value of each element of the input data stream."

    port_driven
end

task_context "WeightedSumTask" do

    doc "Compute the weighted sum of n input streams"

    property("weights", "base/VectorXd").
        doc "Weighting factors of the weighted sum. One dynamic input port will be created for each entry"

    dynamic_input_port(/^summand_\d+$/, "base/VectorXd").
       doc "The input ports for all summands (one for each weight)"

    output_port("weighted_sum", "base/VectorXd").
        doc "The weighted sum of all input streams"

    port_driven
end

task_context "SigmoidTask" do

    doc "Implements a Generalized Sigmoid function: y = A + (K - A) / (1 + Q*exp(-B*(t - M)))

         with:  A - Lower Asymptote
                K - Upper Asymptote
                B - Growth rate
                M - Horizontal shift
                Q - Initial Value

         The size of the port_config property has to be 1  See 'type_to_vector::BaseTask' for more info"

    property("sigmoid_params", "data_analysis/SigmoidParams").
        doc "Parameters for the Sigmoid function"

    input_port("input_data", "double").
        doc "The input data stream"

    output_port("sigmoid", "double").
        doc "The output sigmoid function"

    operation("writeToFile").
        argument("filename", "std/string").
        argument("range_min", "double").
        argument("range_max", "double").
        argument("step_size", "double").
        doc "Output the Sigmoid function to a file"

    port_driven
end
