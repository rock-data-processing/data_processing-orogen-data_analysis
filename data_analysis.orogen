name "data_analysis"

import_types_from "base"
import_types_from "data_analysis/sigmoid.hpp"
using_library "data_analysis"
using_task_library "type_to_vector"

task_context "NormTask" do

    subclasses "type_to_vector::BaseTask"

    doc "Compute the lp norm of the input data stream"

    property("p", "double").
        doc "The exponent of the norm. Allowed values are
              p = 1 -> sum norm
              p = 2 -> euclidean norm
              p = inf -> inf-norm/max.-norm"

    output_port("norm", "double").
        doc "The norm of the input data stream."

    port_driven
end

task_context "RMSTask" do

    subclasses "type_to_vector::BaseTask"

    doc "Compute the RMS of the input data stream:

         y = sqrt( (1/n) sum_1^n (x_n*x_n) )"

    property("window_size", "double").
        doc "The size of the filter window. Can be .Inf, in which case all input data ever arrived will be considered"

    output_port("norm", "double").
        doc "The 2-norm of the current input sample."

    output_port("rms", "double")
        doc "The rms value of the input data stream."

    output_port("n_data", "int").
        doc "Number of arrived data samples"

    port_driven
end

task_context "MeanTask" do

    subclasses "type_to_vector::BaseTask"

    doc "Compute mean and std. dev. of the input data stream"

    property("window_size", "double").
        doc "The size of the filter window. Can be .Inf, in which case all input data ever arrived will be considered"

    output_port("mean_element", "double").
        doc "The mean of the last input sample."

    output_port("mean", "base/VectorXd").
        doc "The mean of the input data stream within the filter window."

    output_port("std_dev", "base/VectorXd").
        doc "The standard deviation of the input data stream  within the filter window."

    output_port("n_data", "int").
        doc "Number of arrived data samples"

    port_driven
end

task_context "MinMaxTask" do

    subclasses "type_to_vector::BaseTask"

    doc "Output the min value of the each element of the input data stream"

    property("window_size", "double").
        doc "The size of the filter window. Can be .Inf, in which case all input data ever arrived will be considered"

    output_port("min", "double")
        doc "The min. value of all elements and all data vectors in the filter window"

    output_port("max", "double")
        doc "The max. value of all elements and all data vectors in the filter window"

    output_port("min_coef", "double")
        doc "The min. value of the current sample"

    output_port("max_coef", "double")
        doc "The max. coefficient of the current sample"

    port_driven
end

task_context "DerivativeSGTask" do

    subclasses "type_to_vector::BaseTask"

    doc "Compute the first derivative of the input stream using a Savitzki Golay (SG) filter, as well as the normal derivative based
         the mean of the (n-1)-th and (n+1)-th input sample."

    property("window_size", "int", 11).
        doc "The size of the filter window. Has to be positive and larger than poly_degree. A large value gives a smoother derivative, but increases
             the phase shift between real and estimated derivate and also increases the computation effort"

    property("poly_degree", "int", 2).
        doc "Degree of the polynomial used for for filtering. Has to be smaller than window_size. A larger value gives a more accurate
             (but not necessarily smoother) derivative and increases the computation effort"

     property("expected_cycle_time", "double").
         doc "The expected time between two consecutive input samples (two consecutive calls of updateHook()). This value will be used for (a) Scaling the SG Derivative (b) numerical
              differentiation for the normal derivative (deltaT). Thus, this value should be as accurate as possible. If the expected cycle time is unknown,
              this value can can be set to .NaN, in which case it will be computed internally (which usually leads to more noisy derivatives)"

    output_port("derivative", "base/VectorXd").
        doc "The normal derivative of the input stream using normal numerical differentiation (based on the mean of the (n-1)-th and (n+1)-th input sample)"

    output_port("derivative_sg", "base/VectorXd").
        doc "The (smooth) derivative of the input stream computed by the sg filter."

    output_port("computation_time", "double").
        doc "Computation time for filtering one input sample in seconds"

    output_port("cycle_time", "double").
        doc "Time between two subsequent incoming samples in seconds"

    port_driven
end


task_context "WeightedSumTask" do

    subclasses "type_to_vector::BaseTask"

    doc "Compute the weighted sum of n input streams"

    property("weights", "base/VectorXd").
        doc "Weighting factors of the weighted sum. Size has to be same as size of port_config vector"

    output_port("weighted_sum", "base/VectorXd").
        doc "The weighted sum of all input streams"

    port_driven
end

task_context "SigmoidTask" do

    doc "Implements a Generalized Sigmoid function: y = A + (K - A) / (1 + Q*exp(-B*(t - M)))

         with:  A - Lower Asymptote
                K - Upper Asymptote
                B - Growth rate
                M - Horizontal shift
                Q - Initial Value

         The size of the port_config property has to be 1  See 'type_to_vector::BaseTask' for more info"

    property("sigmoid_params", "data_analysis/SigmoidParams").
        doc "Parameters for the Sigmoid function"

    input_port("input_data", "double").
        doc "The input data stream"

    output_port("sigmoid", "double").
        doc "The output sigmoid function"

    operation("writeToFile").
        argument("filename", "std/string").
        argument("range_min", "double").
        argument("range_max", "double").
        argument("step_size", "double").
        doc "Output the Sigmoid function to a file"

    port_driven
end
